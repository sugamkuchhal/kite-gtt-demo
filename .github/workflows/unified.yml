name: Unified Script Runner

on:
  schedule:
    - cron: "0,30 4-9 * * 1-5"   # (UNCHANGED) 09:30–15:00 IST every 30 mins, Mon–Fri
    - cron: "30 10 * * 1-5"      # (UNCHANGED) 16:00 IST (4:00 PM) Mon–Fri
  workflow_dispatch:
    inputs:
      command:
        description: "Optional: full command to run (e.g. python3 fetch_holdings.py). Leave empty to run the automated chain."
        required: false
        default: ""
      run_type:
        description: "Optional: choose which chain to run when no command is provided."
        required: false
        type: choice
        options:
          - auto
          - midday
          - eod
        default: auto

# Overlap safety: queue new runs until the current one finishes
concurrency:
  group: unified-script-runner
  cancel-in-progress: false

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Preflight Kite token check
        id: preflight
        env:
          API_KEY: ${{ secrets.API_KEY }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          set -e
          echo "$API_KEY" > api_key.txt
          echo "$ACCESS_TOKEN" > access_token.txt
          python3 -m venv .venv_preflight
          .venv_preflight/bin/python -m pip install --quiet kiteconnect
          if .venv_preflight/bin/python preflight.py; then
            echo "status=ok" >> "$GITHUB_OUTPUT"
            echo "::notice::Kite token valid – skipping Chrome."
          else
            echo "status=fail" >> "$GITHUB_OUTPUT"
            echo "::warning::Kite token invalid – Chrome will be installed."
          fi

      - name: Install Google Chrome
        if: ${{ steps.preflight.outputs.status == 'fail' }}      
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget unzip
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get -fy install
          google-chrome --version

      - name: Create virtualenv and install deps
        run: |
          python3 -m venv .venv
          .venv/bin/python -m pip install --upgrade pip
          .venv/bin/pip install \
            gspread gspread-formatting kiteconnect pandas requests \
            retrying tqdm google-auth google-auth-oauthlib google-auth-httplib2 \
            webdriver-manager selenium pyotp yfinance oauth2client \
            google-api-python-client 

      - name: Recreate secret files (repo root + Mac path mirror)
        env:
          API_KEY: ${{ secrets.API_KEY }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          CREDS_JSON: ${{ secrets.CREDS_JSON }}
          SMTP_TOKEN_JSON: ${{ secrets.SMTP_TOKEN_JSON }}
        run: |
          set -euo pipefail
          MACDIR="/Users/sugamkuchhal/Documents/kite-gtt-demo"
          sudo mkdir -p "$MACDIR" || true
          [ -n "$API_KEY" ] && printf '%s' "$API_KEY" > api_key.txt
          [ -n "$ACCESS_TOKEN" ] && printf '%s' "$ACCESS_TOKEN" > access_token.txt
          [ -n "$CREDS_JSON" ] && printf '%s' "$CREDS_JSON" > creds.json
          [ -n "$SMTP_TOKEN_JSON" ] && printf '%s' "$SMTP_TOKEN_JSON" > smtp_token.json
          [ -n "$API_KEY" ] && printf '%s' "$API_KEY" | sudo tee "$MACDIR/api_key.txt" >/dev/null || true
          [ -n "$ACCESS_TOKEN" ] && printf '%s' "$ACCESS_TOKEN" | sudo tee "$MACDIR/access_token.txt" >/dev/null || true
          [ -n "$CREDS_JSON" ] && printf '%s' "$CREDS_JSON" | sudo tee "$MACDIR/creds.json" >/dev/null || true
          [ -n "$SMTP_TOKEN_JSON" ] && printf '%s' "$SMTP_TOKEN_JSON" | sudo tee "$MACDIR/smtp_token.json" >/dev/null || true
          ls -l creds.json smtp_token.json api_key.txt access_token.txt || true

      - name: Run (manual command if provided, else choose auto/midday/eod)
        env:
          INPUT_COMMAND: ${{ github.event.inputs.command }}
          RUN_TYPE: ${{ github.event.inputs.run_type }}
        run: |
          sudo -E bash -lc '
            set -euo pipefail
            source .venv/bin/activate

            # If a manual command is provided, honor it exactly (existing behavior)
            if [ -n "${INPUT_COMMAND:-}" ]; then
              echo "::notice::Running manual command: ${INPUT_COMMAND}"
              eval "$INPUT_COMMAND"
              exit 0
            fi

            # Normalize RUN_TYPE (default "auto" if unset)
            RT="${RUN_TYPE:-auto}"

            # Helper: convert HH:MM to minutes since midnight
            hm_to_min() {
              IFS=: read -r h m <<<"$1"
              echo $((10#$h*60 + 10#$m))
            }

            # UPDATED mid-day window: 09:00–15:45 IST (inclusive)
            NOW_HM=$(TZ=Asia/Kolkata date +%H:%M)
            NOW_MIN=$(hm_to_min "$NOW_HM")
            MID_START=$(hm_to_min "09:00")
            MID_END=$(hm_to_min "15:45")
            IN_MIDDAY=false
            if [ $NOW_MIN -ge $MID_START ] && [ $NOW_MIN -le $MID_END ]; then
              IN_MIDDAY=true
            fi

            # Decide which chain to run
            case "$RT" in
              midday)
                echo "::notice::run_type=midday selected via manual input"
                RUN_MIDDAY=true
                ;;
              eod)
                echo "::notice::run_type=eod selected via manual input"
                RUN_MIDDAY=false
                ;;
              auto|*)
                echo "::notice::run_type=auto; current IST time is $NOW_HM"
                if [ "$IN_MIDDAY" = true ]; then
                  RUN_MIDDAY=true
                else
                  RUN_MIDDAY=false
                fi
                ;;
            esac

            if [ "$RUN_MIDDAY" = true ]; then
              echo "::group::RUN: Mid-day chain"
              python3 set_field_false.py
              python3 fetch_all_gtts.py
              python3 fetch_all_orders.py
              python3 gtt_processor.py --sheet-id "14G8Yinl28F9ZROedyhiH4p5jCz2bcfA2goVB21PVE1s" --sheet-name "DEL_GTT_INS"
              python3 gtt_processor.py --sheet-id "14G8Yinl28F9ZROedyhiH4p5jCz2bcfA2goVB21PVE1s" --sheet-name "INS_GTT_INS"
              echo "::endgroup::"
            else
              echo "::group::RUN: EOD chain"
              python3 zerodha_tick_size.py
              python3 nse_combined_fetcher.py --mode stock --ticker-file nse_stock_list.txt --worksheet "NSE_Stock_Data" --max-workers 3 --batch-size 50
              python3 nse_combined_fetcher.py --mode etf --ticker-file nse_etf_list.txt --worksheet "NSE_ETF_Data" --max-workers 3 --batch-size 50
              python3 nse_data_etl.py
              python3 prepare_feed_date_ext.py
              python3 prepare_feed_data_val.py
              python3 prepare_feed_list.py --sheet-name "Algo Master Feed Sheet" --source-sheet "SGST_OPEN_LIST" --dest-sheet "SGST_FILTERED_TICKERS"
              python3 prepare_feed_list.py --sheet-name "Algo Master Feed Sheet" --source-sheet "SUPER_OPEN_LIST" --dest-sheet "SUPER_FILTERED_TICKERS"
              python3 prepare_feed_list.py --sheet-name "Algo Master Feed Sheet" --source-sheet "TURTLE_OPEN_LIST" --dest-sheet "TURTLE_FILTERED_TICKERS"
              python3 set_field_false.py
              python3 fetch_all_gtts.py
              python3 fetch_all_orders.py
              python3 append_new_orders.py
              python3 fifo_portfolio.py
              python3 fetch_holdings.py
              python3 date_ext.py
              python3 data_val.py
              bash combined_run.sh
              python3 ops_sort.py --sheet-name="SARAS Portfolio - Stocks" --green-tab="Mailing_List" --red-tab="Old_Mailing_List" --yellow-tab="Action_Mailing_List" --loose-update
              python3 algo_tickers_mailer.py --emails "sugamkuchhal@gmail.com,sharma.virat@gmail.com"
              echo "::endgroup::"
            fi
          '
