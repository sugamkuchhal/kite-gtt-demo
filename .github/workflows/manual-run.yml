name: Manual Script Runner

on:
  workflow_dispatch:
    inputs:
      command:
        description: "Full command to run (e.g. python3 fetch_holdings.py)"
        required: true
        default: "python3 fetch_holdings.py"

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Google Chrome
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget unzip
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo dpkg -i google-chrome-stable_current_amd64.deb || sudo apt-get -fy install
          google-chrome --version

      # Use virtualenv to avoid Debian package conflicts
      - name: Create virtualenv and install deps
        run: |
          python3 -m venv .venv
          .venv/bin/python -m pip install --upgrade pip
          .venv/bin/pip install \
            gspread gspread-formatting kiteconnect pandas requests retrying tqdm \
            google-auth google-auth-oauthlib google-auth-httplib2 webdriver-manager selenium pyotp yfinance oauth2client

      - name: Recreate secret files (keep Mac path + repo root)
        env:
          API_KEY: ${{ secrets.API_KEY }}
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          CREDS_JSON: ${{ secrets.CREDS_JSON }}
          SMTP_TOKEN_JSON: ${{ secrets.SMTP_TOKEN_JSON }}
        run: |
          set -euo pipefail
          MACDIR="/Users/sugamkuchhal/Documents/kite-gtt-demo"

          # Create Mac-style path (may need sudo for /Users)
          sudo mkdir -p "$MACDIR" || true

          # Always-write readable copies in repo root
          [ -n "$API_KEY" ] && printf '%s' "$API_KEY" > api_key.txt
          [ -n "$ACCESS_TOKEN" ] && printf '%s' "$ACCESS_TOKEN" > access_token.txt
          if [ -n "$CREDS_JSON" ]; then
            printf '%s' "$CREDS_JSON" > creds.json
          fi
          if [ -n "$SMTP_TOKEN_JSON" ]; then
            printf '%s' "$SMTP_TOKEN_JSON" > smtp_token.json
          fi

          # Best-effort mirror to the Mac path (ignore failures if /Users is picky)
          [ -n "$API_KEY" ] && printf '%s' "$API_KEY" | sudo tee "$MACDIR/api_key.txt" >/dev/null || true
          [ -n "$ACCESS_TOKEN" ] && printf '%s' "$ACCESS_TOKEN" | sudo tee "$MACDIR/access_token.txt" >/dev/null || true
          [ -n "$CREDS_JSON" ] && printf '%s' "$CREDS_JSON" | sudo tee "$MACDIR/creds.json" >/dev/null || true
          [ -n "$SMTP_TOKEN_JSON" ] && printf '%s' "$SMTP_TOKEN_JSON" | sudo tee "$MACDIR/smtp_token.json" >/dev/null || true

          echo "âœ… Secrets written (repo root + Mac path mirror)."
          ls -l creds.json smtp_token.json api_key.txt access_token.txt || true

      # Run as root so hardcoded /Users/... paths are readable; use the venv Python
      - name: Run your command (root + venv)
        run: |
          sudo -E bash -lc 'source .venv/bin/activate && ${{ github.event.inputs.command }}'
